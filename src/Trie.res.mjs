// Generated by ReScript, PLEASE EDIT WITH CARE


function makeNode() {
  return {
          isEndOfWord: false,
          children: {}
        };
}

function insert(root, word) {
  if (word === "") {
    return {
            isEndOfWord: true,
            children: root.children
          };
  }
  var firstChar = word.substring(0, 1);
  var restOfWord = word.substring(1, word.length);
  var node = root.children[firstChar];
  var childNode = node !== undefined ? node : ({
        isEndOfWord: false,
        children: {}
      });
  var updatedChild = insert(childNode, restOfWord);
  root.children[firstChar] = updatedChild;
  return root;
}

function search(_root, _word) {
  while(true) {
    var word = _word;
    var root = _root;
    if (word === "") {
      return root.isEndOfWord;
    }
    var firstChar = word.substring(0, 1);
    var restOfWord = word.substring(1, word.length);
    var childNode = root.children[firstChar];
    if (childNode === undefined) {
      return false;
    }
    _word = restOfWord;
    _root = childNode;
    continue ;
  };
}

function startsWith(_root, _prefix) {
  while(true) {
    var prefix = _prefix;
    var root = _root;
    if (prefix === "") {
      return true;
    }
    var firstChar = prefix.substring(0, 1);
    var restOfPrefix = prefix.substring(1, prefix.length);
    var childNode = root.children[firstChar];
    if (childNode === undefined) {
      return false;
    }
    _prefix = restOfPrefix;
    _root = childNode;
    continue ;
  };
}

function make() {
  return {
          isEndOfWord: false,
          children: {}
        };
}

var Trie = {
  makeNode: makeNode,
  insert: insert,
  search: search,
  startsWith: startsWith,
  make: make
};

export {
  Trie ,
}
/* No side effect */
